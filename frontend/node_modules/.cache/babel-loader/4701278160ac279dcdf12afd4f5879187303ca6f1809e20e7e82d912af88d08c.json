{"ast":null,"code":"var _jsxFileName = \"/home/axel/Bureau/Pragma_H/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch('http://localhost:3000/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            data {\n              id\n              nb_block\n              starknet_block\n              eventCount\n            }\n          }\n        `\n      })\n    }).then(r => r.json()).then(data => {\n      console.log('API response:', data); // Etape 4: Vérifiez la réponse de l'API\n      setData(data.data.data);\n    }).catch(error => console.error('Error fetching data:', error)); // Etape 3: Gérez les erreurs\n  }, []);\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.map(d => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Block Number: \", d.nb_block]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Starknet Block: \", d.starknet_block]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Event Count: \", d.eventCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, d.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","data","setData","fetch","method","headers","body","JSON","stringify","query","then","r","json","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","d","nb_block","starknet_block","eventCount","id","_c","$RefreshReg$"],"sources":["/home/axel/Bureau/Pragma_H/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('http://localhost:3000/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            data {\n              id\n              nb_block\n              starknet_block\n              eventCount\n            }\n          }\n        `\n      })\n    })\n    .then(r => r.json())\n    .then(data => {\n      console.log('API response:', data); // Etape 4: Vérifiez la réponse de l'API\n      setData(data.data.data);\n    })\n    .catch(error => console.error('Error fetching data:', error)); // Etape 3: Gérez les erreurs\n  }, []);\n\n  if (!data) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      {data.map(d => (\n        <div key={d.id}>\n          <p>Block Number: {d.nb_block}</p>\n          <p>Starknet Block: {d.starknet_block}</p>\n          <p>Event Count: {d.eventCount}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,wBAAwB,EAAE;MAC9BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;IACH,CAAC,CAAC,CACDC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACnBF,IAAI,CAACT,IAAI,IAAI;MACZY,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEb,IAAI,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACD,IAAI,CAACA,IAAI,CAACA,IAAI,CAAC;IACzB,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACf,IAAI,EAAE;IACT,oBAAOH,OAAA;MAAAmB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEvB,OAAA;IAAAmB,QAAA,EACGhB,IAAI,CAACqB,GAAG,CAACC,CAAC,iBACTzB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,GAAG,gBAAc,EAACM,CAAC,CAACC,QAAQ;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjCvB,OAAA;QAAAmB,QAAA,GAAG,kBAAgB,EAACM,CAAC,CAACE,cAAc;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzCvB,OAAA;QAAAmB,QAAA,GAAG,eAAa,EAACM,CAAC,CAACG,UAAU;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAH1BE,CAAC,CAACI,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIT,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrB,EAAA,CA9CQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}