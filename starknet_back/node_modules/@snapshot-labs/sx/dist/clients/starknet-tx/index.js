"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarkNetTx = void 0;
const starknet_1 = require("starknet");
const utils = __importStar(require("../../utils"));
const authenticators_1 = require("../../authenticators");
const strategies_1 = require("../../strategies");
const { getSelectorFromName } = starknet_1.hash;
class StarkNetTx {
    config;
    constructor(config) {
        this.config = config;
    }
    async getStrategiesAddresses(envelope) {
        return Promise.all(envelope.data.message.strategies.map((id) => starknet_1.defaultProvider.getStorageAt(envelope.data.message.space, utils.encoding.getStorageVarAddress('Voting_voting_strategies_store', id.toString(16)))));
    }
    async getStrategiesParams(call, strategiesAddresses, envelope) {
        return Promise.all(strategiesAddresses.map((address, index) => {
            const strategy = (0, strategies_1.getStrategy)(address);
            if (!strategy)
                throw new Error('Invalid strategy');
            return strategy.getParams(call, address, index, envelope, this.config);
        }));
    }
    async getExtraProposeCalls(strategiesAddresses, envelope) {
        const extraCalls = await Promise.all(strategiesAddresses.map((address, index) => {
            const strategy = (0, strategies_1.getStrategy)(address);
            if (!strategy)
                throw new Error('Invalid strategy');
            return strategy.getExtraProposeCalls(address, index, envelope, this.config);
        }));
        return extraCalls.flat();
    }
    async getProposeCalldata(strategiesAddresses, envelope) {
        const { address, data } = envelope;
        const { strategies, executor, metadataUri, executionParams } = data.message;
        const strategiesParams = await this.getStrategiesParams('propose', strategiesAddresses, envelope);
        return utils.encoding.getProposeCalldata(address, utils.intsSequence.IntsSequence.LEFromString(metadataUri), executor, strategies, strategiesParams, executionParams);
    }
    async getVoteCalldata(strategiesAddresses, envelope) {
        const { address, data } = envelope;
        const { strategies, proposal, choice } = data.message;
        const strategiesParams = await this.getStrategiesParams('vote', strategiesAddresses, envelope);
        return utils.encoding.getVoteCalldata(address, proposal, choice, strategies, strategiesParams);
    }
    async propose(account, envelope) {
        const authenticator = (0, authenticators_1.getAuthenticator)(envelope.data.message.authenticator);
        if (!authenticator) {
            throw new Error('Invalid authenticator');
        }
        const strategiesAddresses = await this.getStrategiesAddresses(envelope);
        const calldata = await this.getProposeCalldata(strategiesAddresses, envelope);
        const call = authenticator.createCall(envelope, getSelectorFromName('propose'), calldata);
        const extraCalls = await this.getExtraProposeCalls(strategiesAddresses, envelope);
        const calls = [...extraCalls, call];
        const fee = await account.estimateFee(calls);
        return account.execute(calls, undefined, {
            maxFee: fee.suggestedMaxFee
        });
    }
    async vote(account, envelope) {
        const authenticator = (0, authenticators_1.getAuthenticator)(envelope.data.message.authenticator);
        if (!authenticator) {
            throw new Error('Invalid authenticator');
        }
        const strategiesAddresses = await this.getStrategiesAddresses(envelope);
        const calldata = await this.getVoteCalldata(strategiesAddresses, envelope);
        const call = authenticator.createCall(envelope, getSelectorFromName('vote'), calldata);
        const fee = await account.estimateFee(call);
        return account.execute(call, undefined, {
            maxFee: fee.suggestedMaxFee
        });
    }
}
exports.StarkNetTx = StarkNetTx;
