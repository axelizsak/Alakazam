"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumSig = void 0;
const starknet_1 = require("starknet");
const randombytes_1 = __importDefault(require("randombytes"));
const wallet_1 = require("@ethersproject/wallet");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const strategies_1 = require("../../strategies");
const types_1 = require("./types");
const utils = __importStar(require("../../utils"));
class EthereumSig {
    config;
    constructor(config) {
        this.config = config;
    }
    generateSalt() {
        return Number(utils.splitUint256.SplitUint256.fromHex(utils.bytes.bytesToHex((0, randombytes_1.default)(4))).toHex());
    }
    async getStrategiesAddresses(data) {
        return Promise.all(data.strategies.map((id) => starknet_1.defaultProvider.getStorageAt(data.space, utils.encoding.getStorageVarAddress('Voting_voting_strategies_store', id.toString(16)))));
    }
    async getStrategiesParams(call, address, data) {
        const strategiesAddresses = await this.getStrategiesAddresses(data);
        return Promise.all(strategiesAddresses.map((strategyAddress, index) => {
            const strategy = (0, strategies_1.getStrategy)(strategyAddress);
            if (!strategy)
                throw new Error('Invalid strategy');
            return strategy.getParams(call, strategyAddress, index, {
                address,
                sig: '',
                data: {
                    message: data
                }
            }, this.config);
        }));
    }
    async sign(web3, address, message, types) {
        const signer = wallet_1.Wallet.isSigner(web3) ? web3 : web3.getSigner();
        const data = { domain: types_1.domain, types, message };
        const sig = await signer._signTypedData(types_1.domain, data.types, message);
        return { address, sig, data };
    }
    async send(envelop) {
        const init = {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                jsonrpc: '2.0',
                method: 'send',
                params: { envelop },
                id: null
            })
        };
        const res = await (0, cross_fetch_1.default)(this.config.manaUrl, init);
        const json = await res.json();
        return json.result;
    }
    async propose(web3, address, data) {
        const strategiesParams = await this.getStrategiesParams('propose', address, data);
        const message = {
            ...data,
            space: utils.encoding.hexPadRight(data.space),
            authenticator: utils.encoding.hexPadRight(data.authenticator),
            proposerAddress: utils.encoding.hexPadRight(address),
            executor: utils.encoding.hexPadRight(data.executor),
            executionParamsHash: utils.encoding.hexPadRight(starknet_1.hash.computeHashOnElements(data.executionParams)),
            usedVotingStrategiesHash: utils.encoding.hexPadRight(starknet_1.hash.computeHashOnElements(data.strategies.map((strategy) => `0x${strategy.toString(16)}`))),
            userVotingStrategyParamsFlatHash: utils.encoding.hexPadRight(starknet_1.hash.computeHashOnElements(utils.encoding.flatten2DArray(strategiesParams))),
            salt: this.generateSalt()
        };
        return this.sign(web3, address, message, types_1.proposeTypes);
    }
    async vote(web3, address, data) {
        const strategiesParams = await this.getStrategiesParams('vote', address, data);
        const message = {
            ...data,
            space: utils.encoding.hexPadRight(data.space),
            authenticator: utils.encoding.hexPadRight(data.authenticator),
            voterAddress: utils.encoding.hexPadRight(address),
            usedVotingStrategiesHash: utils.encoding.hexPadRight(starknet_1.hash.computeHashOnElements(data.strategies.map((strategy) => `0x${strategy.toString(16)}`))),
            userVotingStrategyParamsFlatHash: utils.encoding.hexPadRight(starknet_1.hash.computeHashOnElements(utils.encoding.flatten2DArray(strategiesParams))),
            salt: this.generateSalt()
        };
        return this.sign(web3, address, message, types_1.voteTypes);
    }
}
exports.EthereumSig = EthereumSig;
