"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProcessBlockInputs = void 0;
const common_1 = __importStar(require("@ethereumjs/common"));
const from_rpc_1 = __importDefault(require("@ethereumjs/block/dist/from-rpc"));
const ints_sequence_1 = require("../ints-sequence");
const bytes_1 = require("../bytes");
/**
 * Produces the input data for the process_block function in Fossil
 * @param block Block object from RPC call
 * @param chain EVM chain identifier
 * @param hardfork Hardfork identifier
 * @returns ProcessBlockInputs object
 */
function getProcessBlockInputs(block, chain = common_1.Chain.Mainnet, hardfork = common_1.Hardfork.London) {
    block.difficulty = `0x${BigInt(block.difficulty).toString(16)}`;
    block.totalDifficulty = `0x${BigInt(block.totalDifficulty).toString(16)}`;
    const common = new common_1.default({ chain: chain, hardfork: hardfork });
    const header = (0, from_rpc_1.default)(block, [], { common }).header;
    const headerRlp = `0x${header.serialize().toString('hex')}`;
    const headerInts = ints_sequence_1.IntsSequence.fromBytes((0, bytes_1.hexToBytes)(headerRlp));
    return {
        blockNumber: block.number,
        blockOptions: 8,
        headerInts: headerInts
    };
}
exports.getProcessBlockInputs = getProcessBlockInputs;
