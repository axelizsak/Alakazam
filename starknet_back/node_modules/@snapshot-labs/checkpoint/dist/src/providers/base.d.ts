import { Pool as PgPool } from 'pg';
import type { Logger } from '../utils/logger';
import type Checkpoint from '../checkpoint';
import type { AsyncMySqlPool } from '../mysql';
import type { CheckpointConfig, CheckpointWriters } from '../types';
type Instance = {
    writer: CheckpointWriters;
    config: CheckpointConfig;
    setLastIndexedBlock(blockNum: number): any;
    insertCheckpoints(checkpoints: {
        blockNumber: number;
        contractAddress: string;
    }[]): any;
    getWriterParams(): Promise<{
        instance: Checkpoint;
        mysql: AsyncMySqlPool;
        pg: PgPool;
    }>;
};
export declare class BlockNotFoundError extends Error {
    constructor();
}
export declare class BaseProvider {
    protected readonly instance: Instance;
    protected readonly log: Logger;
    protected readonly abis: Record<string, any>;
    constructor({ instance, log, abis }: {
        instance: Instance;
        log: Logger;
        abis?: Record<string, any>;
    });
    getNetworkIdentifier(): Promise<string>;
    processBlock(blockNum: number): Promise<number>;
    processPool(blockNumber: number): void;
}
export {};
